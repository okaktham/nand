// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Reset signal

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (for M)
        pc[15];          // Address of next instruction

    PARTS:
    // D logic
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluout, load=loadD, out=x);

    // A logic
    Not(in=instruction[15], out=in15bar);
    Or(a=in15bar, b=instruction[5], out=loadA);
    And(a=instruction[15], b=instruction[3], out=writeM);
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=Ain);
    ARegister(in=Ain, load=loadA, out=A, out[0..14]=addressM);

    Mux16(a=A, b=inM, sel=instruction[12], out=y);

    ALU(
        x=x,
        y=y,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluout,
        out=outM,
        zr=zr,
        ng=ng
    );


    Not(in=zr, out=zrbar);
    Not(in=ng, out=ngbar);
    And(a=zrbar, b=ngbar, out=pos);
    And(a=instruction[0], b=pos, out=jgt);
    And(a=instruction[1], b=zr, out=jeq);
    And(a=instruction[2], b=ng, out=jlt);
    Or(a=jgt, b=jeq, out=jge);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jlt, b=jgt, out=jne);
    And(a=instruction[0], b=instruction[1], out=unc);
    And(a=unc, b=instruction[2], out=jmp);
    Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jlt, in[3]=jge, in[4]=jle, in[5]=jne, in[6]=jmp, in[7]=false, out=prejump);
    And(a=instruction[15], b=prejump, out=jump);
    // PC: next address
    PC(in=A, load=jump, inc=true, reset=reset, out=pcout, out[0..14]=pc);
}